Fibbing in action

1.
传统的用来保证网络性能的方法叫traffic engineering(TE),流量工程。TE预计算网络配置来处理可预测的负载，但是这个方法对瞬变现象不管用，因为瞬变现象不是可预测的。由于社会网络中分享的内容造成的突然大量流量会使网络的一部分发生拥塞，造成资源不足。所以操作人员只能在网络中投入大量过剩的资源，否则就会面临服务被破坏的危险。
2.
如果同时到来多条流，可以针对各种属性制订一个优先级，视频的服务器、客户端、端口，也可以先存下来一段时间积攒多个流后统一处理，也可以允许后到的但是优先级高的视频抢占较优的网络路径，把之前的流挤到别的路径上。

3.
设置：
实验，建立一个网络，源结点是视频流的服务器，目的结点是播放视频的客户端。一个Fibbing控制器与R3连接，它使用SNMP（Simple Network Management Protocol）监视链路负载，当服务器有新的客户端时会通知控制器。
实验：
（1）多个（D1里有多个）客户端向S1请求视频。当链路负载增加时，为避免拥塞，Fibbing控制器通过在路由器B处添加一个虚假结点在B处引入等价路由。
（2）在第一波视频没有结束之前，又有一些客户端（D2）向S2请求视频播放。然后控制器通过在A处添加两个虚假结点，在A处引入不平均的负载均衡。
结果：
当Fibbing控制器在使用的时候，视频播放流畅，当Fibbing控制器不可用的时候，视频播放卡顿。图2绘制了A-R1，B-R2，B-R3这三条路径上随着时间的吞吐量的，第0秒加入一条从S1到D1的流，在第15秒加入30条从S1到D1的流，在第35秒加入31条从S2到D2的流。可以看到，当网络负载上升时，额外的路径被使用，避免拥塞的发生。

Fibbing控制器的源代码、建立虚拟机和样品实验室的脚本（包括这个演示）可以在www.fibbing.net获得。

在github.com/fibbing这里可以下载到一些做Fibbing实验的代码。


SDN Partitioning：
输入和输出都是OSPF报文，根据网络需求修改里面的一些字段。
